/**
 * Copyright Hannes Markschlaeger
 * File created 13.03.2012
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version. 
 */
package org.openuat.android.service.interfaces;
import org.openuat.android.service.interfaces.ISecureChannel;
import org.openuat.android.service.interfaces.IConnectionCallback;

/** Main interface for the OpenUAT authentication service. It allows 
 * applications to establish and use secure, authenticated channels to other
 * devices over any supported communication channel (e.g. WLAN, Bluetooth, or
 * XMPP). 
 */
interface IDeviceAuthenticator {
	/** Returns a list of authentication methods currently supported by this service instance.
	 * The returned set of strings should be taken verbatim when selecting one of them for
	 * a specific device authentication protocol run, and should not be modified or interpreted
	 * by the application. 
	 */ 
	String[] getSupportedAuthenticationMethods();
	
	// TODO: method(s) to localize and display authentication method in applications which 
	// offer the end-user a selection of methods
	
	/** 
	 * Returns a list of devices currently available for a connection.
	 * 
	 * @param _serviceId The identifier of the application of interest.
	 * @return A list of available devices to connect to.
	 */
	String[] getAvailableDevices(String _serviceId);

	/** Returns the list of devices that the local one already holds a shared key with, i.e. those 
	 * that were already authenticated in the past.
	 */	
	String[] getPairedDevices();
	
	/** 
	 * Registers the calling application for incoming requests for secure
	 * communication. 
	 * It is recommended to either use a UUID in String format or e.g. the unique
	 * package name of the application for registering the service.
	 *
	 * @param serviceId A unique string identifying the application (e.g. the package name)
	 * @param connectionCallback The interface to be called 
	 * 	when requested or new SecureChannels are incoming.
	 */
	void register(in String serviceId, IConnectionCallback connectionCallback);
	
//	/** Asks the service to initiate a secure (encrypted and authenticated) 
//	 * connection to a device selected by the user. I.e., the service will ask
//	 * the user to select the appropriate device and perform human-assisted
//	 * device authentication.
//	 *
//	 * On success, an instance of ISecureChannel is returned. 
//	 * On failure, null is returned.
//	 */
//	ISecureChannel selectAndAuthenticate(in String serviceId);

	/** Asks the service to initiate a secure (encrypted and authenticated) 
	 * connection to the device and service on this device as specified by
	 * the parameters. If this device was not previously authenticated, then
	 * the service will perform human-assisted device authentication.
	 * Once the connection has been established and verified it will be sent to the IConnectionCallback.
	 *
	 * @param serviceID The application
	 * @param device The remote device to connect to. Use only strings returned by getAvailableDevices!
	 */
	void authenticate(in String serviceId, in String device);	
}
